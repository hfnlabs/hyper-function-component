{
  "name": "hfc",
  "scopeName": "source.hfc",
  "fileTypes": ["hfc"],
  "patterns": [
    {
      "include": "#double_comment"
    },
    {
      "include": "#model_block_definition"
    },
    {
      "include": "#type_definition"
    }
  ],
  "repository": {
    "model_block_definition": {
      "begin": "^\\s*(model|type)\\s+([A-Z][\\w]*)\\s*({)",
      "name": "source.hfc.embedded.source",
      "beginCaptures": {
        "1": {
          "name": "storage.type.model.hfc"
        },
        "2": {
          "name": "entity.name.type.model.hfc"
        },
        "3": {
          "name": "punctuation.definition.tag.hfc"
        }
      },
      "patterns": [
        {
          "include": "#double_comment"
        },
        {
          "include": "#field_block_definition"
        },
        {
          "include": "#field_definition"
        }
      ],
      "end": "\\s*\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.hfc"
        }
      }
    },
    "assignment": {
      "patterns": [
        {
          "begin": "^\\s*(\\w+)\\s*(=)\\s*",
          "beginCaptures": {
            "1": {
              "name": "string"
            },
            "2": {
              "name": "keyword.operator.terraform"
            }
          },
          "patterns": [
            {
              "include": "#value"
            },
            {
              "include": "#double_comment_inline"
            }
          ],
          "end": "\\n"
        }
      ]
    },
    "field_definition": {
      "name": "scalar.field",
      "patterns": [
        {
          "match": "^\\s*(\\w+)(\\s*:)?\\s+([A-Z][\\w]*)(\\[\\])?",
          "captures": {
            "1": {
              "name": "string"
            },
            "2": {
              "name": "punctuation.separator.key-value"
            },
            "3": {
              "name": "support.type.primitive.hfc"
            },
            "4": {
              "name": "keyword.operator.list_type.hfc"
            }
          }
        },
        {
          "include": "#attribute_with_arguments"
        },
        {
          "include": "#attribute"
        }
      ]
    },
    "field_block_definition": {
      "name": "scalar.field",
      "patterns": [
        {
          "begin": "^\\s*(\\w+)(\\s*:)?(\\s*{)",
          "beginCaptures": {
            "1": {
              "name": "string"
            },
            "2": {
              "name": "punctuation.separator.key-value"
            },
            "3": {
              "name": "punctuation.definition.tag.hfc"
            }
          },
          "patterns": [
            {
              "include": "#double_comment"
            },
            {
              "include": "#field_block_definition"
            },
            {
              "include": "#field_definition"
            }
          ],
          "end": "(\\s*\\})(\\[\\])?",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.hfc"
            },
            "2": {
              "name": "keyword.operator.list_type.hfc"
            }
          }
        },
        {
          "include": "#attribute_with_arguments"
        },
        {
          "include": "#attribute"
        }
      ]
    },
    "attribute_with_arguments": {
      "name": "source.hfc.attribute.with_arguments",
      "begin": "(@@?[\\w\\.]+)(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.attribute.hfc"
        },
        "2": {
          "name": "punctuation.definition.tag.hfc"
        }
      },
      "patterns": [
        {
          "include": "#named_argument"
        },
        {
          "include": "#value"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.hfc"
        }
      }
    },
    "attribute": {
      "name": "source.hfc.attribute",
      "match": "(@@?[\\w\\.]+)",
      "captures": {
        "1": {
          "name": "entity.name.function.attribute.hfc"
        }
      }
    },
    "array": {
      "name": "source.hfc.array",
      "begin": "\\[",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.hfc"
        }
      },
      "patterns": [
        {
          "include": "#value"
        }
      ],
      "end": "\\]",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.hfc"
        }
      }
    },
    "value": {
      "name": "source.hfc.value",
      "patterns": [
        {
          "include": "#array"
        },
        {
          "include": "#functional"
        },
        {
          "include": "#literal"
        }
      ]
    },
    "functional": {
      "name": "source.hfc.functional",
      "begin": "(\\w+)(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.functional.hfc"
        },
        "2": {
          "name": "punctuation.definition.tag.hfc"
        }
      },
      "patterns": [
        {
          "include": "#value"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.hfc"
        }
      }
    },
    "literal": {
      "name": "source.hfc.literal",
      "patterns": [
        {
          "include": "#boolean"
        },
        {
          "include": "#number"
        },
        {
          "include": "#double_quoted_string"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "\\b(\\w)+\\b",
          "name": "support.constant.constant.hfc"
        }
      ]
    },
    "map_key": {
      "name": "source.hfc.key",
      "patterns": [
        {
          "match": "(\\w+)\\s*(:)\\s*",
          "captures": {
            "1": {
              "name": "variable.parameter.key.hfc"
            },
            "2": {
              "name": "punctuation.definition.separator.key-value.hfc"
            }
          }
        }
      ]
    },
    "named_argument": {
      "name": "source.hfc.named_argument",
      "patterns": [
        {
          "include": "#map_key"
        },
        {
          "include": "#value"
        }
      ]
    },
    "double_comment": {
      "begin": "//",
      "end": "$\\n?",
      "name": "comment.hfc"
    },
    "double_comment_inline": {
      "match": "//[^\\n]*",
      "name": "comment.hfc"
    },
    "boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.hfc"
    },
    "number": {
      "match": "((0(x|X)[0-9a-fA-F]*)|(\\+|-)?\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDdg]|UL|ul)?\\b",
      "name": "constant.numeric.hfc"
    },
    "double_quoted_string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.double.start.hfc"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "string.quoted.double.end.hfc"
        }
      },
      "patterns": [
        {
          "include": "#string_interpolation"
        },
        {
          "match": "([\\w\\-\\/\\._\\\\%@:\\?=]+)",
          "name": "string.quoted.double.hfc"
        }
      ],
      "name": "unnamed"
    },
    "string_interpolation": {
      "patterns": [
        {
          "begin": "\\$\\{",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.interpolation.start.hfc"
            }
          },
          "end": "\\s*\\}",
          "endCaptures": {
            "0": {
              "name": "keyword.control.interpolation.end.hfc"
            }
          },
          "name": "source.tag.embedded.source.hfc",
          "patterns": [
            {
              "include": "#value"
            }
          ]
        }
      ]
    }
  }
}
